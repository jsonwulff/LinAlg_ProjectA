using System;
using System.Linq;
using System.Collections.Generic;
using Core;

namespace ProjectA
{
    public static partial class MainClass
    {
        //For info: numpy.random.seed(2340971238)



        //data for 'augmentRight()'
        //a size 3 list of arguments for the test routine

        private static readonly List<object> augList = new List<object>();

        // random dimensions (m = 8,n = 4)

        private static readonly double[,] Temp001 =
        {
            {1.110000, 5.090000, -2.570000, -2.000000},
            {7.740000, -9.560000, 3.080000, -3.780000},
            {2.220000, -9.630000, 0.250000, 4.270000},
            {8.910000, -5.190000, 8.010000, 7.500000},
            {-1.090000, 9.750000, -2.810000, 0.730000},
            {-0.810000, -1.050000, -8.350000, 6.300000},
            {0.970000, 3.800000, -4.680000, 1.190000},
            {2.340000, -4.520000, 2.650000, 3.820000}
        };
        private static readonly double[] Temp002 = {9.480000, -8.830000, 6.890000, -4.870000, -4.810000, 9.470000, -0.700000, 3.590000};
        private static readonly double[,] Temp003 =
        {
            {1.110000, 5.090000, -2.570000, -2.000000, 9.480000},
            {7.740000, -9.560000, 3.080000, -3.780000, -8.830000},
            {2.220000, -9.630000, 0.250000, 4.270000, 6.890000},
            {8.910000, -5.190000, 8.010000, 7.500000, -4.870000},
            {-1.090000, 9.750000, -2.810000, 0.730000, -4.810000},
            {-0.810000, -1.050000, -8.350000, 6.300000, 9.470000},
            {0.970000, 3.800000, -4.680000, 1.190000, -0.700000},
            {2.340000, -4.520000, 2.650000, 3.820000, 3.590000}
        };

        // random dimensions (m = 12,n = 14)

        private static readonly double[,] Temp005 =
        {
            {2.060000, 1.160000, 8.430000, -6.810000, -8.690000, -0.620000, -3.120000, 4.730000, 8.360000, -9.250000, 2.730000, -6.800000, 5.400000, 2.360000},
            {-7.330000, -1.810000, -5.700000, 0.630000, -1.610000, -3.790000, 5.110000, 5.370000, 3.110000, 3.150000, 6.170000, -8.290000, -0.700000, 2.270000},
            {6.250000, -0.580000, -4.580000, -1.180000, 4.810000, 5.560000, 5.280000, 2.960000, -7.760000, 2.580000, -7.120000, -3.110000, -5.090000, -5.690000},
            {7.910000, 1.680000, -5.350000, 3.380000, -6.390000, 3.000000, 7.260000, 6.610000, -7.390000, 7.400000, -7.180000, -1.600000, -8.570000, -1.730000},
            {-3.440000, 3.660000, -6.870000, 2.670000, 0.300000, -5.620000, 5.870000, -3.570000, 1.720000, 9.380000, 8.120000, -4.320000, -8.680000, -8.120000},
            {-0.900000, 8.680000, -8.230000, 9.350000, -4.720000, -5.580000, -8.900000, -1.030000, 6.920000, -7.150000, -0.880000, 8.220000, -5.390000, -3.320000},
            {-7.630000, 1.110000, 4.340000, -0.390000, -3.740000, -3.100000, 6.560000, 9.100000, 2.770000, 2.560000, 9.380000, -2.760000, -4.260000, -4.780000},
            {-6.050000, -3.490000, 9.420000, -3.710000, -3.050000, -8.560000, 6.850000, 6.250000, -3.430000, 7.920000, 3.920000, 7.510000, -8.330000, -5.780000},
            {4.160000, 9.840000, 6.070000, -7.960000, 0.330000, 9.710000, -2.450000, -3.510000, -1.810000, 7.530000, -2.200000, 6.830000, 1.740000, 8.580000},
            {4.810000, -2.420000, 9.570000, 5.680000, 2.290000, 3.780000, 9.820000, -5.870000, 3.690000, -5.560000, -5.350000, 6.770000, 4.800000, 2.030000},
            {-5.880000, 3.380000, 3.790000, 1.560000, 5.380000, -2.670000, -9.500000, 8.470000, 3.040000, 4.550000, -9.040000, -2.790000, 2.120000, 9.970000},
            {9.610000, -5.880000, 0.690000, -0.010000, -1.140000, -7.580000, 1.280000, 3.260000, 1.690000, -3.860000, 4.920000, -5.430000, 8.810000, 0.680000}
        };
        private static readonly double[] Temp006 = {-1.270000, 0.480000, 0.680000, 1.050000, -6.450000, -1.360000, -9.250000, -7.090000, -2.910000, 2.570000, 8.290000, -5.720000};
        private static readonly double[,] Temp007 =
        {
            {2.060000, 1.160000, 8.430000, -6.810000, -8.690000, -0.620000, -3.120000, 4.730000, 8.360000, -9.250000, 2.730000, -6.800000, 5.400000, 2.360000, -1.270000},
            {-7.330000, -1.810000, -5.700000, 0.630000, -1.610000, -3.790000, 5.110000, 5.370000, 3.110000, 3.150000, 6.170000, -8.290000, -0.700000, 2.270000, 0.480000},
            {6.250000, -0.580000, -4.580000, -1.180000, 4.810000, 5.560000, 5.280000, 2.960000, -7.760000, 2.580000, -7.120000, -3.110000, -5.090000, -5.690000, 0.680000},
            {7.910000, 1.680000, -5.350000, 3.380000, -6.390000, 3.000000, 7.260000, 6.610000, -7.390000, 7.400000, -7.180000, -1.600000, -8.570000, -1.730000, 1.050000},
            {-3.440000, 3.660000, -6.870000, 2.670000, 0.300000, -5.620000, 5.870000, -3.570000, 1.720000, 9.380000, 8.120000, -4.320000, -8.680000, -8.120000, -6.450000},
            {-0.900000, 8.680000, -8.230000, 9.350000, -4.720000, -5.580000, -8.900000, -1.030000, 6.920000, -7.150000, -0.880000, 8.220000, -5.390000, -3.320000, -1.360000},
            {-7.630000, 1.110000, 4.340000, -0.390000, -3.740000, -3.100000, 6.560000, 9.100000, 2.770000, 2.560000, 9.380000, -2.760000, -4.260000, -4.780000, -9.250000},
            {-6.050000, -3.490000, 9.420000, -3.710000, -3.050000, -8.560000, 6.850000, 6.250000, -3.430000, 7.920000, 3.920000, 7.510000, -8.330000, -5.780000, -7.090000},
            {4.160000, 9.840000, 6.070000, -7.960000, 0.330000, 9.710000, -2.450000, -3.510000, -1.810000, 7.530000, -2.200000, 6.830000, 1.740000, 8.580000, -2.910000},
            {4.810000, -2.420000, 9.570000, 5.680000, 2.290000, 3.780000, 9.820000, -5.870000, 3.690000, -5.560000, -5.350000, 6.770000, 4.800000, 2.030000, 2.570000},
            {-5.880000, 3.380000, 3.790000, 1.560000, 5.380000, -2.670000, -9.500000, 8.470000, 3.040000, 4.550000, -9.040000, -2.790000, 2.120000, 9.970000, 8.290000},
            {9.610000, -5.880000, 0.690000, -0.010000, -1.140000, -7.580000, 1.280000, 3.260000, 1.690000, -3.860000, 4.920000, -5.430000, 8.810000, 0.680000, -5.720000}
        };

        // random dimensions (m = 1,n = 1)

        private static readonly double[,] Temp009 =
        {
            {6.190000}
        };
        private static readonly double[] Temp010 = {-8.980000};
        private static readonly double[,] Temp011 =
        {
            {6.190000, -8.980000}
        };



        //data for matrix vector product, non square case
        //a size 3 list of arguments for the test routine.

        private static readonly List<object> nsmatvecList = new List<object>();

        // random dimensions (m = 6,n = 11)

        private static readonly double[,] Temp013 =
        {
            {-1.760000, 4.690000, -6.640000, -4.550000, 1.270000, 7.880000, 1.220000, -9.800000, 4.010000, 4.860000, -3.440000},
            {0.110000, 6.290000, -5.410000, -1.940000, 6.860000, 3.990000, -2.360000, -0.390000, -9.000000, 5.490000, -2.470000},
            {2.420000, 4.720000, 0.910000, 6.920000, 1.060000, 7.210000, 1.420000, -4.910000, 3.520000, 0.570000, 4.610000},
            {3.120000, 3.280000, 5.000000, 9.850000, 0.530000, 8.430000, 3.350000, -2.460000, -5.700000, 5.100000, 7.830000},
            {-5.360000, 6.750000, -8.140000, -8.930000, 0.750000, 4.930000, 5.240000, 6.850000, 6.690000, -8.690000, 3.450000},
            {-0.430000, 2.090000, -0.230000, -4.050000, 8.680000, 6.570000, -6.770000, -5.040000, 2.580000, 6.280000, 6.930000}
        };
        private static readonly double[] Temp014 = {-3.420000, 2.170000, -5.450000, 9.070000, -1.710000, 2.340000, -4.820000, 5.750000, 2.630000, -9.440000, 1.560000};
        private static readonly double[] Temp015 = {-75.545400, -47.448300, 50.821200, -3.855600, 125.741300, -66.978700};
        // random dimensions (m = 8,n = 10)

        private static readonly double[,] Temp017 =
        {
            {6.450000, -4.080000, 0.370000, -8.310000, 9.760000, -1.460000, 6.030000, 1.120000, 7.710000, -4.780000},
            {-2.570000, 9.900000, 9.700000, 2.110000, 1.370000, -1.800000, 7.400000, -2.000000, 5.490000, -3.530000},
            {7.270000, -3.620000, 4.400000, 2.080000, -5.110000, 1.410000, 0.800000, -4.550000, -9.990000, 2.100000},
            {2.250000, 8.740000, -0.960000, -3.750000, 8.020000, 8.570000, 5.530000, -0.140000, -4.270000, -3.090000},
            {-2.530000, 4.430000, -4.500000, -8.260000, -9.120000, 5.190000, 5.070000, 6.570000, 9.820000, -0.180000},
            {-7.790000, 0.180000, 9.990000, -5.900000, 5.470000, -6.450000, 2.000000, -9.120000, 9.900000, -4.800000},
            {-3.010000, -6.820000, 1.070000, 3.490000, -8.990000, -4.570000, 3.710000, 9.710000, 9.780000, 6.410000},
            {-6.220000, -8.630000, 1.020000, 9.720000, 1.730000, 5.740000, 4.180000, 3.610000, 4.960000, 6.740000}
        };
        private static readonly double[] Temp018 = {2.330000, -3.010000, 1.720000, -8.330000, -3.120000, 7.540000, -7.650000, 6.190000, -4.310000, 1.490000};
        private static readonly double[] Temp019 = {-23.840600, -152.437400, 56.552900, 18.745300, 68.714000, -139.635900, -21.002900, -50.813600};
        // random dimensions (m = 4,n = 7)

        private static readonly double[,] Temp021 =
        {
            {4.090000, 8.160000, 1.300000, -0.970000, -5.660000, -7.670000, -9.700000},
            {0.240000, -8.890000, -6.990000, 7.160000, -4.200000, 1.860000, -9.540000},
            {8.410000, 4.280000, -5.230000, 9.930000, -9.770000, 9.730000, 3.290000},
            {-6.090000, -4.730000, 0.650000, 5.090000, 5.940000, 5.130000, 7.100000}
        };
        private static readonly double[] Temp022 = {-8.930000, 5.300000, -6.980000, -4.670000, 2.710000, -4.790000, 5.470000};
        private static readonly double[] Temp023 = {-29.478100, -106.382400, -117.372100, 31.369100};


        //data for matrix vector product, square case
        //a size 3 list of arguments for the test routine.

        private static readonly List<object> smatvecList = new List<object>();

        // random dimensions (m = 1,n = 1)

        private static readonly double[,] Temp025 =
        {
            {6.540000}
        };
        private static readonly double[] Temp026 = {7.810000};
        private static readonly double[] Temp027 = {51.077400};
        // random dimensions (m = 5,n = 5)

        private static readonly double[,] Temp029 =
        {
            {2.860000, -2.000000, 2.450000, -2.160000, -5.940000},
            {3.290000, -7.850000, 7.100000, 8.510000, 5.830000},
            {-5.300000, 3.070000, 6.410000, -5.850000, 4.610000},
            {-6.830000, -8.170000, 0.150000, 3.700000, -1.390000},
            {8.900000, 7.420000, 8.050000, -6.920000, 7.480000}
        };
        private static readonly double[] Temp030 = {-7.750000, 7.490000, 7.560000, 9.620000, -5.800000};
        private static readonly double[] Temp031 = {-4.950200, 17.434200, 29.513900, 36.529200, -62.495600};
        // random dimensions (m = 2,n = 2)

        private static readonly double[,] Temp033 =
        {
            {0.320000, -6.540000},
            {1.680000, 0.450000}
        };
        private static readonly double[] Temp034 = {-8.500000, 2.270000};
        private static readonly double[] Temp035 = {-17.565800, -13.258500};


        //data for matrix matrix product, non square case
        //a size 3 list of arguments for the test routine.

        private static readonly List<object> nsmatmatList = new List<object>();

        // random dimensions (m = 10,n = 14, p=2)

        private static readonly double[,] Temp037 =
        {
            {2.090000, 1.730000, 1.660000, 6.480000, 1.680000, -0.700000, 6.700000, -3.100000, -9.090000, 3.950000, 4.010000, 1.330000, 1.570000, -0.440000},
            {-4.650000, 9.490000, -9.920000, -1.560000, 5.290000, -8.930000, 2.750000, 8.900000, 7.290000, -0.940000, 2.320000, 0.520000, -4.400000, 0.100000},
            {-2.910000, 3.110000, 9.150000, 8.900000, 9.220000, -4.140000, -6.030000, -7.090000, 0.640000, 1.630000, 9.390000, 2.110000, -1.470000, -1.890000},
            {0.520000, 8.440000, 3.520000, -8.510000, 0.730000, -0.070000, -7.260000, 0.500000, -9.850000, 3.080000, -6.110000, 2.350000, 2.210000, 3.140000},
            {2.810000, 9.020000, -8.950000, -4.120000, -8.340000, 5.810000, -8.240000, -8.400000, -2.190000, -4.710000, 8.570000, -6.030000, -7.780000, 4.860000},
            {2.760000, -2.880000, 9.740000, 3.170000, 4.070000, 0.970000, 7.480000, -5.440000, -3.030000, 6.150000, 0.210000, -8.830000, -6.680000, -0.620000},
            {9.930000, 0.980000, 4.650000, 7.810000, 6.950000, -1.330000, -5.900000, -3.110000, -5.860000, -9.160000, -6.030000, 3.980000, -3.290000, 7.740000},
            {0.440000, 2.190000, -9.000000, -1.690000, 7.020000, 5.920000, 6.300000, 5.500000, 4.400000, -0.820000, 2.970000, -4.490000, -3.490000, -4.690000},
            {3.040000, 2.630000, 3.000000, -0.740000, -9.180000, 4.450000, 2.420000, -4.150000, -6.160000, 2.980000, -7.900000, 9.290000, 9.800000, -6.610000},
            {-2.170000, 6.860000, 9.160000, -3.140000, 9.810000, 3.220000, -2.030000, 8.540000, -0.920000, -8.590000, -7.410000, 8.360000, 6.130000, -9.560000}
        };
        private static readonly double[,] Temp038 =
        {
            {9.120000, -0.530000},
            {-7.360000, 6.310000},
            {3.700000, 9.240000},
            {-9.990000, 3.320000},
            {9.620000, -5.890000},
            {-3.100000, 5.560000},
            {3.220000, -9.700000},
            {4.910000, 4.120000},
            {4.990000, -7.620000},
            {-2.670000, -9.460000},
            {-6.920000, 5.870000},
            {6.730000, -2.980000},
            {-2.260000, -9.960000},
            {-7.540000, 5.430000}
        };
        private static readonly double[,] Temp039 =
        {
            {-102.515100, -11.440900},
            {33.274900, -95.531100},
            {-91.547100, 120.129800},
            {-0.968300, 123.135600},
            {-316.035100, 319.195000},
            {11.611600, 22.960400},
            {72.050400, 224.749500},
            {84.574200, -107.730700},
            {18.356000, -110.321600},
            {298.878700, 40.545100}
        };

        // random dimensions (m = 3,n = 2, p=13)

        private static readonly double[,] Temp041 =
        {
            {-6.750000, 9.850000},
            {4.520000, -5.160000},
            {9.310000, -1.370000}
        };
        private static readonly double[,] Temp042 =
        {
            {-1.020000, 0.250000, -1.280000, 5.210000, -8.780000, -9.180000, -2.020000, 6.660000, 7.990000, 9.000000, 7.760000, -5.040000, 0.730000},
            {-3.480000, -3.180000, 3.810000, 2.630000, 1.680000, 3.280000, 6.770000, 9.040000, 7.620000, -3.610000, -8.240000, -5.330000, -5.970000}
        };
        private static readonly double[,] Temp043 =
        {
            {-27.393000, -33.010500, 46.168500, -9.262000, 75.813000, 94.273000, 80.319500, 44.089000, 21.124500, -96.308500, -133.544000, -18.480500, -63.732000},
            {13.346400, 17.538800, -25.445200, 9.978400, -48.354400, -58.418400, -44.063600, -16.543200, -3.204400, 59.307600, 77.593600, 4.722000, 34.104800},
            {-4.728600, 6.684100, -17.136500, 44.902000, -84.043400, -89.959400, -28.081100, 49.619800, 63.947500, 88.735700, 83.534400, -39.620300, 14.975200}
        };

        // random dimensions (m = 9,n = 11, p=10)

        private static readonly double[,] Temp045 =
        {
            {6.880000, -5.640000, -4.780000, 7.560000, -8.940000, -6.950000, 0.970000, 9.950000, 3.250000, -8.040000, 6.440000},
            {7.880000, -3.110000, 2.700000, 2.200000, 4.340000, 1.610000, -8.970000, -5.300000, 3.560000, -9.840000, -8.620000},
            {-7.210000, -3.810000, 4.990000, 0.750000, -7.840000, 8.030000, 4.520000, -5.810000, -2.050000, 1.480000, -6.330000},
            {-2.800000, 1.510000, 0.890000, -7.900000, -5.080000, -0.870000, 5.580000, 3.020000, -2.080000, -6.170000, 5.160000},
            {-4.420000, 1.140000, -5.670000, -5.170000, 4.260000, 8.910000, 2.000000, -2.410000, 9.540000, 6.070000, 8.190000},
            {-7.540000, 1.630000, -8.710000, -9.730000, 3.920000, -3.480000, 3.710000, -6.440000, -4.440000, 0.330000, -4.980000},
            {4.270000, -8.360000, 8.160000, -9.930000, -7.450000, 9.730000, 0.800000, 9.110000, -2.040000, 8.280000, 0.280000},
            {7.390000, -9.400000, 7.890000, -0.740000, -6.600000, -4.540000, 6.550000, 3.240000, 7.600000, -5.700000, 9.570000},
            {1.200000, -1.670000, 2.670000, -1.100000, 9.590000, 8.960000, 2.530000, 8.500000, 3.560000, -1.920000, 7.280000}
        };
        private static readonly double[,] Temp046 =
        {
            {3.730000, 3.590000, 3.400000, 9.830000, 2.500000, -0.060000, -4.030000, -0.720000, -0.240000, -2.080000},
            {1.910000, 4.080000, -9.560000, -9.920000, -5.350000, -5.760000, 5.700000, 9.290000, 4.820000, -1.260000},
            {3.280000, -7.370000, -3.740000, -5.880000, -9.370000, 2.500000, -7.970000, -5.540000, 3.120000, -9.820000},
            {3.190000, -3.880000, 0.580000, 6.830000, 9.130000, -2.320000, 0.880000, 5.900000, -0.120000, 8.780000},
            {5.790000, 5.250000, 1.150000, 3.720000, -8.290000, -0.970000, 3.100000, 9.060000, -8.010000, 3.380000},
            {0.530000, -9.280000, 6.690000, -9.270000, -8.270000, -0.100000, 7.680000, 6.370000, 7.160000, 2.270000},
            {-9.650000, -5.700000, -8.910000, -5.640000, -4.350000, -9.250000, 3.950000, -4.740000, 4.040000, 7.540000},
            {-1.220000, 5.750000, 8.700000, -1.280000, 9.280000, 5.710000, -4.600000, -8.480000, 6.260000, -7.080000},
            {8.560000, -8.030000, 4.930000, 4.250000, 2.140000, -0.070000, 9.000000, -5.560000, 2.430000, 2.840000},
            {-2.280000, 9.540000, -5.550000, -7.120000, -5.230000, -8.520000, -4.730000, -0.730000, 8.880000, 3.520000},
            {3.960000, 7.570000, -2.520000, -7.960000, -4.160000, 4.100000, -8.710000, -0.910000, 0.650000, 4.740000}
        };
        private static readonly double[,] Temp047 =
        {
            {18.036000, 22.780000, 165.133900, 236.078200, 403.104800, 154.470500, -126.966700, -218.566900, -15.915300, 8.441300},
            {177.108300, -172.050200, 191.161400, 319.862500, 66.608500, 115.671100, 99.364300, 95.728200, -185.705400, -96.840900},
            {-139.067400, -273.302300, -54.802400, -147.820000, -98.338200, -73.489200, 79.859300, -29.380700, 105.074800, 13.708500},
            {-100.551000, -15.934100, -55.986400, -153.846100, -36.131800, 56.537200, -42.914400, -127.748900, 31.095000, -75.801300},
            {63.884000, 8.353500, 10.705600, -199.538400, -196.690000, -64.571300, 151.385700, 56.064500, 94.559300, 172.091900},
            {-150.190300, 77.327100, -133.315200, -52.946900, -104.922300, -105.600900, 132.092500, 90.768600, -109.079200, 57.597600},
            {-96.997200, -24.482700, 130.100200, -194.833700, -98.199700, 72.951800, -185.711500, -266.050700, 243.683900, -202.546100},
            {41.298000, -121.284900, 61.903700, 87.595700, 88.177800, 127.180300, -179.248600, -334.765100, 18.800500, -46.788400},
            {95.705300, -8.056800, 141.661200, -96.532200, -121.477000, 79.665600, 10.545200, -2.788500, 47.227100, 13.239600}
        };



        //data for matrix matrix product, square case
        //a size 3 list of arguments for the test routine.

        private static readonly List<object> smatmatList = new List<object>();

        // random dimensions (m = 5,n = 5, p=5)

        private static readonly double[,] Temp049 =
        {
            {-1.550000, 4.180000, -5.450000, 9.820000, -0.110000},
            {3.300000, 6.380000, -4.610000, -0.090000, -2.200000},
            {4.410000, 9.690000, 2.460000, -3.920000, -2.610000},
            {-5.370000, -3.880000, -0.220000, 3.360000, -4.750000},
            {-6.470000, -8.950000, 4.390000, -2.170000, -0.100000}
        };
        private static readonly double[,] Temp050 =
        {
            {-0.800000, -3.070000, -4.450000, 8.090000, 1.190000},
            {7.480000, 1.410000, 7.530000, 6.850000, 8.730000},
            {0.300000, -4.510000, 4.240000, 4.600000, 1.950000},
            {-2.930000, -4.300000, 3.570000, -1.050000, -9.720000},
            {-6.900000, 6.940000, 2.740000, 3.420000, -6.250000}
        };
        private static readonly double[,] Temp051 =
        {
            {2.857800, -7.757600, 50.020900, -19.663700, -70.743500},
            {59.143100, 4.774900, 7.460700, 41.764500, 65.259700},
            {99.185800, -12.227800, 42.625800, 108.559200, 149.053500},
            {-1.862200, -35.405700, -7.272500, -90.806300, -43.663400},
            {-53.404900, -3.918500, -28.009300, -91.519300, -55.554900}
        };

        // random dimensions (m = 10,n = 10, p=10)

        private static readonly double[,] Temp053 =
        {
            {5.810000, 0.800000, -7.040000, 8.270000, -7.040000, 5.290000, -6.200000, -5.280000, 1.140000, -2.420000},
            {5.600000, 3.510000, 3.820000, -4.490000, 8.670000, -2.950000, 0.890000, 8.380000, -4.650000, 0.870000},
            {7.680000, -9.410000, -1.300000, -6.090000, -2.730000, -7.930000, 3.000000, -0.300000, -1.130000, -4.580000},
            {-1.020000, 8.960000, -1.830000, 1.990000, -8.610000, 4.590000, 1.700000, 4.280000, 7.260000, -5.360000},
            {-7.740000, -1.940000, 6.630000, 9.760000, 3.630000, -4.410000, 7.850000, -6.930000, -5.780000, -5.940000},
            {-5.840000, 0.440000, 4.190000, -0.070000, -1.780000, -6.130000, -4.910000, -3.490000, 5.060000, -3.130000},
            {-6.470000, -9.710000, 7.870000, 0.060000, -3.890000, -5.230000, 8.600000, -9.160000, -2.750000, -5.910000},
            {7.880000, -3.170000, -6.470000, -3.730000, 9.190000, -5.600000, -5.080000, -7.260000, 1.580000, 8.730000},
            {4.940000, 0.070000, 6.320000, 4.560000, -1.660000, 3.600000, 9.500000, 1.730000, -8.510000, -4.120000},
            {8.070000, -9.440000, -0.500000, -3.360000, -9.070000, -2.310000, -2.820000, 1.100000, 4.560000, -7.900000}
        };
        private static readonly double[,] Temp054 =
        {
            {-1.480000, -0.370000, 4.970000, -6.460000, -9.110000, -1.710000, 6.460000, -1.710000, -1.420000, 9.680000},
            {4.340000, -0.780000, -0.150000, -9.750000, -0.430000, 7.350000, -0.260000, 5.620000, -4.900000, -4.610000},
            {-7.460000, -7.340000, 2.160000, 0.040000, 7.190000, 2.140000, 3.720000, -1.920000, -5.450000, -3.730000},
            {-2.170000, -0.350000, -9.260000, -9.410000, 1.230000, 5.430000, 7.450000, 8.720000, -3.600000, -7.560000},
            {10.000000, -7.260000, -8.020000, 1.780000, 7.700000, -3.330000, -8.680000, -0.820000, -7.730000, -2.750000},
            {-1.260000, 7.350000, -8.830000, 7.840000, 9.570000, -6.370000, -9.110000, -9.290000, 8.580000, -2.090000},
            {-4.040000, 7.160000, -5.290000, 6.240000, -5.030000, 7.940000, -6.710000, 1.990000, 7.560000, 7.030000},
            {7.090000, 3.530000, -6.130000, -1.940000, -1.610000, 7.210000, 9.280000, -4.560000, 4.810000, -1.180000},
            {-4.780000, -7.030000, -5.460000, -1.970000, 3.110000, -3.770000, -2.280000, 8.850000, -2.800000, 5.590000},
            {-9.550000, 2.330000, 3.120000, 0.380000, -7.640000, 3.050000, 0.200000, -0.450000, 9.770000, 0.720000}
        };
        private static readonly double[,] Temp055 =
        {
            {-42.345100, 59.314100, -1.891200, -126.102700, -35.580300, -83.444300, 75.183000, 59.737600, -2.871000, -8.130700},
            {148.345600, -45.233400, 5.675100, -36.902700, -31.131500, 77.607400, 50.212700, -94.026600, -53.580000, 11.046900},
            {-11.707300, -4.600500, 162.932200, 52.146700, -162.797400, -46.593900, 76.538000, -41.319000, -3.069700, 204.522800},
            {-2.191500, 66.123200, -91.863300, -92.944300, 20.445900, 74.561300, 42.705600, 87.914100, 27.035000, -1.688500},
            {-22.239100, -47.934200, -90.425500, 20.783600, 115.845000, 98.202500, -48.447200, 111.444800, -132.507500, -138.485000},
            {-29.831900, -151.385200, 58.985700, -51.990300, 80.649100, -25.988600, 36.915300, 114.544300, -153.937300, -60.319700},
            {-153.819300, -23.214800, 70.355500, 162.897600, 47.861500, -2.286000, -65.760500, 30.888400, -30.229100, 25.592100},
            {8.022000, -112.294200, 125.935700, -30.112600, -128.902300, -137.814600, -64.023500, 26.145700, -58.511100, 117.627700},
            {-31.276300, 112.997000, -49.757600, 21.140400, -17.873500, 120.368500, 41.877600, -74.951300, 49.218900, 0.696600},
            {-56.841400, -8.679000, 123.325400, 5.534400, -82.180800, -113.326700, 144.619700, -33.011200, -6.070300, 177.352800}
        };

        // random dimensions (m = 8,n = 8, p=8)

        private static readonly double[,] Temp057 =
        {
            {-7.120000, 3.250000, -6.140000, 6.420000, -5.590000, -4.400000, 1.550000, 0.150000},
            {4.490000, 3.690000, -3.770000, 5.570000, 2.000000, -4.930000, -9.070000, 0.760000},
            {-0.370000, -2.550000, 4.640000, 7.850000, 4.120000, -4.730000, -0.510000, -6.380000},
            {7.950000, -5.160000, 0.280000, 2.790000, 1.660000, 4.450000, -3.760000, -6.270000},
            {-8.230000, 4.560000, 3.290000, 9.290000, -4.710000, 2.040000, 8.510000, -1.140000},
            {-3.340000, -1.310000, -7.550000, 4.540000, 4.970000, 3.990000, 9.570000, -5.930000},
            {-3.140000, 1.060000, 3.810000, 1.420000, 4.160000, 8.370000, -2.300000, -7.970000},
            {5.750000, 5.260000, -4.820000, 9.210000, -7.190000, -3.190000, -3.040000, 3.300000}
        };
        private static readonly double[,] Temp058 =
        {
            {-1.630000, 9.720000, 7.200000, 1.270000, -6.910000, -7.150000, 4.630000, -7.260000},
            {0.500000, 6.240000, 6.580000, 2.050000, -4.970000, 3.120000, 5.570000, 3.320000},
            {-9.500000, -2.790000, 9.690000, -3.110000, 9.440000, -9.090000, 9.710000, 9.960000},
            {-4.600000, -6.500000, 7.330000, -1.700000, -0.960000, -4.780000, -9.000000, 4.870000},
            {1.690000, -6.020000, -8.620000, -7.060000, 0.190000, -5.090000, 4.640000, -5.650000},
            {-7.490000, 4.050000, 9.550000, 5.170000, 5.030000, -8.760000, -5.750000, -6.620000},
            {-9.250000, -9.710000, -4.280000, -6.450000, 8.730000, 7.330000, -6.760000, 1.290000},
            {-9.220000, -7.610000, -3.900000, 8.560000, -0.950000, -2.350000, 2.150000, 4.230000}
        };
        private static readonly double[,] Temp059 =
        {
            {49.817000, -73.886000, -43.370200, 13.805400, -40.883200, 164.179100, -143.055600, 95.937700},
            {121.915300, 91.261300, 32.439100, 40.921500, -194.622200, -48.208300, 55.180000, -17.918800},
            {25.069700, -73.934000, 29.438000, -138.337400, 30.095400, -53.292400, -5.467300, 59.053400},
            {31.031800, 118.413000, 115.185200, -24.227600, -33.493900, -149.080800, -20.271900, -128.682600},
            {-149.740300, -158.445800, 98.830000, -47.977500, 141.086900, 69.920200, -157.932800, 172.162100},
            {0.296500, -110.642000, -95.118600, -118.112000, 64.153300, 90.556000, -214.255800, -100.421900},
            {2.018700, 48.073700, 116.695600, -55.562800, 81.416400, -108.287400, -14.831500, -44.414900},
            {6.117500, 77.064900, 128.468800, 99.543800, -167.303100, 9.592000, -61.145200, 44.342400}
        };



        //data for matrix transpose, square case
        //a size 3 list of arguments for the test routine.

        private static readonly List<object> nstranspList = new List<object>();

        // random dimensions (m = 13,n = 13)

        private static readonly double[,] Temp061 =
        {
            {-3.420000, -8.130000, -7.980000, 8.130000, 0.850000, -3.060000, 6.010000, 1.150000, -1.060000, 1.040000, -6.180000, -0.510000, -8.050000},
            {-9.690000, 3.520000, 9.460000, 5.370000, -9.790000, 0.580000, 8.940000, 2.260000, 4.620000, -9.500000, 5.370000, -4.780000, 5.480000},
            {-4.240000, 7.060000, 0.940000, 9.640000, -3.470000, 0.730000, 0.730000, -8.040000, 7.550000, -2.970000, -3.010000, -5.280000, 9.370000},
            {-9.770000, -3.580000, 7.230000, -7.690000, -7.000000, 2.010000, -9.950000, -0.140000, 9.970000, 6.880000, -9.210000, 7.060000, 7.270000},
            {6.730000, 3.870000, -0.210000, -2.670000, 4.130000, -5.480000, 6.790000, 0.030000, 3.410000, 0.540000, 4.920000, 6.150000, 3.060000},
            {-4.850000, -8.560000, 6.650000, 9.200000, -9.030000, -3.350000, 9.310000, -4.920000, 9.310000, -2.290000, 3.120000, -9.480000, -0.100000},
            {-9.830000, -1.470000, 0.150000, -3.940000, -4.480000, 8.130000, -7.820000, -7.000000, -5.200000, 6.040000, -9.080000, 9.420000, 7.540000},
            {5.910000, -4.420000, -3.950000, -0.650000, 0.720000, -6.190000, 1.870000, -8.690000, 4.250000, 9.540000, 7.170000, 5.610000, 5.900000},
            {3.110000, 1.230000, 2.240000, -5.400000, 5.660000, 6.710000, -6.640000, 7.080000, 6.870000, -9.190000, -8.470000, -9.960000, 2.340000},
            {-0.160000, 6.360000, 4.320000, -3.890000, -8.090000, 5.970000, -0.410000, -7.120000, -9.610000, -9.180000, 8.470000, -9.390000, 8.290000},
            {-5.490000, -2.480000, -2.080000, -6.610000, -1.530000, -9.260000, 5.500000, 4.800000, -5.050000, -7.820000, 7.890000, 3.880000, 4.730000},
            {4.520000, -8.530000, -8.290000, 7.720000, -0.180000, 0.090000, 4.900000, -2.310000, -7.000000, -4.760000, -3.740000, -6.170000, 3.450000},
            {5.460000, -3.230000, -8.480000, -8.960000, 5.950000, 5.720000, 2.480000, -5.770000, 9.200000, 3.900000, -5.600000, 1.710000, 5.960000}
        };
        private static readonly double[,] Temp062 =
        {
            {-3.420000, -9.690000, -4.240000, -9.770000, 6.730000, -4.850000, -9.830000, 5.910000, 3.110000, -0.160000, -5.490000, 4.520000, 5.460000},
            {-8.130000, 3.520000, 7.060000, -3.580000, 3.870000, -8.560000, -1.470000, -4.420000, 1.230000, 6.360000, -2.480000, -8.530000, -3.230000},
            {-7.980000, 9.460000, 0.940000, 7.230000, -0.210000, 6.650000, 0.150000, -3.950000, 2.240000, 4.320000, -2.080000, -8.290000, -8.480000},
            {8.130000, 5.370000, 9.640000, -7.690000, -2.670000, 9.200000, -3.940000, -0.650000, -5.400000, -3.890000, -6.610000, 7.720000, -8.960000},
            {0.850000, -9.790000, -3.470000, -7.000000, 4.130000, -9.030000, -4.480000, 0.720000, 5.660000, -8.090000, -1.530000, -0.180000, 5.950000},
            {-3.060000, 0.580000, 0.730000, 2.010000, -5.480000, -3.350000, 8.130000, -6.190000, 6.710000, 5.970000, -9.260000, 0.090000, 5.720000},
            {6.010000, 8.940000, 0.730000, -9.950000, 6.790000, 9.310000, -7.820000, 1.870000, -6.640000, -0.410000, 5.500000, 4.900000, 2.480000},
            {1.150000, 2.260000, -8.040000, -0.140000, 0.030000, -4.920000, -7.000000, -8.690000, 7.080000, -7.120000, 4.800000, -2.310000, -5.770000},
            {-1.060000, 4.620000, 7.550000, 9.970000, 3.410000, 9.310000, -5.200000, 4.250000, 6.870000, -9.610000, -5.050000, -7.000000, 9.200000},
            {1.040000, -9.500000, -2.970000, 6.880000, 0.540000, -2.290000, 6.040000, 9.540000, -9.190000, -9.180000, -7.820000, -4.760000, 3.900000},
            {-6.180000, 5.370000, -3.010000, -9.210000, 4.920000, 3.120000, -9.080000, 7.170000, -8.470000, 8.470000, 7.890000, -3.740000, -5.600000},
            {-0.510000, -4.780000, -5.280000, 7.060000, 6.150000, -9.480000, 9.420000, 5.610000, -9.960000, -9.390000, 3.880000, -6.170000, 1.710000},
            {-8.050000, 5.480000, 9.370000, 7.270000, 3.060000, -0.100000, 7.540000, 5.900000, 2.340000, 8.290000, 4.730000, 3.450000, 5.960000}
        };

        // random dimensions (m = 9,n = 9)

        private static readonly double[,] Temp064 =
        {
            {-3.650000, -3.660000, 2.680000, -6.160000, 6.490000, 1.380000, 2.540000, 7.280000, -5.060000},
            {9.030000, 1.370000, -1.470000, 9.250000, 4.810000, 9.930000, -3.150000, 1.430000, 4.150000},
            {-9.120000, -4.140000, -1.170000, 2.200000, 7.180000, 3.210000, 5.240000, 6.090000, 9.900000},
            {7.690000, 8.330000, -4.280000, -9.230000, 1.640000, -7.090000, 5.040000, -0.870000, -0.550000},
            {-8.270000, 4.240000, 7.910000, -6.060000, 0.340000, 5.950000, -8.960000, 8.670000, -6.000000},
            {7.040000, -5.000000, -5.450000, -8.880000, -0.100000, 1.070000, -5.140000, -5.380000, -4.380000},
            {-4.660000, -4.700000, -0.650000, -6.280000, -4.810000, -8.740000, -1.300000, -9.610000, -4.510000},
            {-4.500000, -7.830000, -6.750000, 0.960000, 9.500000, 9.220000, -3.660000, 2.860000, -3.880000},
            {8.560000, -0.320000, 8.150000, 3.080000, -0.740000, 1.430000, 9.120000, -3.840000, -5.010000}
        };
        private static readonly double[,] Temp065 =
        {
            {-3.650000, 9.030000, -9.120000, 7.690000, -8.270000, 7.040000, -4.660000, -4.500000, 8.560000},
            {-3.660000, 1.370000, -4.140000, 8.330000, 4.240000, -5.000000, -4.700000, -7.830000, -0.320000},
            {2.680000, -1.470000, -1.170000, -4.280000, 7.910000, -5.450000, -0.650000, -6.750000, 8.150000},
            {-6.160000, 9.250000, 2.200000, -9.230000, -6.060000, -8.880000, -6.280000, 0.960000, 3.080000},
            {6.490000, 4.810000, 7.180000, 1.640000, 0.340000, -0.100000, -4.810000, 9.500000, -0.740000},
            {1.380000, 9.930000, 3.210000, -7.090000, 5.950000, 1.070000, -8.740000, 9.220000, 1.430000},
            {2.540000, -3.150000, 5.240000, 5.040000, -8.960000, -5.140000, -1.300000, -3.660000, 9.120000},
            {7.280000, 1.430000, 6.090000, -0.870000, 8.670000, -5.380000, -9.610000, 2.860000, -3.840000},
            {-5.060000, 4.150000, 9.900000, -0.550000, -6.000000, -4.380000, -4.510000, -3.880000, -5.010000}
        };

        // random dimensions (m = 7,n = 7)

        private static readonly double[,] Temp067 =
        {
            {7.390000, -5.220000, 5.770000, -2.190000, -5.130000, -7.980000, -4.090000},
            {1.510000, -7.370000, 4.060000, 4.050000, -6.730000, 6.030000, -3.420000},
            {-0.060000, 2.430000, -2.210000, -1.800000, 5.160000, 7.350000, -5.540000},
            {-3.190000, -8.270000, 8.260000, 0.770000, -2.800000, 4.400000, -6.800000},
            {-3.360000, 4.350000, -8.300000, 8.460000, -0.740000, -0.450000, 6.110000},
            {-3.040000, -6.630000, 0.010000, -7.650000, -2.980000, 3.750000, -8.900000},
            {6.630000, -2.900000, 8.860000, 2.910000, -8.270000, 5.950000, 0.830000}
        };
        private static readonly double[,] Temp068 =
        {
            {7.390000, 1.510000, -0.060000, -3.190000, -3.360000, -3.040000, 6.630000},
            {-5.220000, -7.370000, 2.430000, -8.270000, 4.350000, -6.630000, -2.900000},
            {5.770000, 4.060000, -2.210000, 8.260000, -8.300000, 0.010000, 8.860000},
            {-2.190000, 4.050000, -1.800000, 0.770000, 8.460000, -7.650000, 2.910000},
            {-5.130000, -6.730000, 5.160000, -2.800000, -0.740000, -2.980000, -8.270000},
            {-7.980000, 6.030000, 7.350000, 4.400000, -0.450000, 3.750000, 5.950000},
            {-4.090000, -3.420000, -5.540000, -6.800000, 6.110000, -8.900000, 0.830000}
        };



        //data for matrix transpose, non square case
        //a size 3 list of arguments for the test routine.

        private static readonly List<object> stranspList = new List<object>();

        // random dimensions (m = 12,n = 5)

        private static readonly double[,] Temp070 =
        {
            {-5.790000, 1.740000, -5.120000, -2.200000, -5.050000},
            {1.390000, 9.540000, 0.960000, -1.130000, 9.290000},
            {-6.640000, 2.080000, -3.700000, 0.030000, 1.850000},
            {-3.460000, -2.080000, 9.080000, 7.040000, -1.870000},
            {1.460000, 5.070000, -4.990000, 8.940000, 4.650000},
            {7.950000, -7.870000, 7.700000, -0.370000, -8.620000},
            {-1.070000, -0.990000, -4.840000, 3.130000, -0.020000},
            {-2.350000, 8.950000, -6.040000, 1.890000, 6.350000},
            {6.720000, -5.030000, -4.340000, -5.490000, 5.890000},
            {1.030000, -8.430000, 6.870000, -2.730000, 8.350000},
            {-1.830000, 7.440000, -6.870000, 7.020000, 6.800000},
            {-3.380000, 3.770000, 2.750000, 6.260000, 6.080000}
        };
        private static readonly double[,] Temp071 =
        {
            {-5.790000, 1.390000, -6.640000, -3.460000, 1.460000, 7.950000, -1.070000, -2.350000, 6.720000, 1.030000, -1.830000, -3.380000},
            {1.740000, 9.540000, 2.080000, -2.080000, 5.070000, -7.870000, -0.990000, 8.950000, -5.030000, -8.430000, 7.440000, 3.770000},
            {-5.120000, 0.960000, -3.700000, 9.080000, -4.990000, 7.700000, -4.840000, -6.040000, -4.340000, 6.870000, -6.870000, 2.750000},
            {-2.200000, -1.130000, 0.030000, 7.040000, 8.940000, -0.370000, 3.130000, 1.890000, -5.490000, -2.730000, 7.020000, 6.260000},
            {-5.050000, 9.290000, 1.850000, -1.870000, 4.650000, -8.620000, -0.020000, 6.350000, 5.890000, 8.350000, 6.800000, 6.080000}
        };

        // random dimensions (m = 2,n = 6)

        private static readonly double[,] Temp073 =
        {
            {-4.870000, 5.100000, -4.570000, 3.030000, -1.340000, 4.040000},
            {7.590000, -6.640000, -7.780000, -9.950000, 0.350000, 4.530000}
        };
        private static readonly double[,] Temp074 =
        {
            {-4.870000, 7.590000},
            {5.100000, -6.640000},
            {-4.570000, -7.780000},
            {3.030000, -9.950000},
            {-1.340000, 0.350000},
            {4.040000, 4.530000}
        };

        // random dimensions (m = 5,n = 4)

        private static readonly double[,] Temp076 =
        {
            {1.340000, 5.580000, -4.560000, 8.860000},
            {-3.920000, 3.840000, -0.760000, -8.870000},
            {-5.840000, -7.800000, 1.100000, -8.300000},
            {-5.590000, -1.520000, 9.370000, -0.430000},
            {3.810000, 7.900000, -1.410000, 4.880000}
        };
        private static readonly double[,] Temp077 =
        {
            {1.340000, -3.920000, -5.840000, -5.590000, 3.810000},
            {5.580000, 3.840000, -7.800000, -1.520000, 7.900000},
            {-4.560000, -0.760000, 1.100000, 9.370000, -1.410000},
            {8.860000, -8.870000, -8.300000, -0.430000, 4.880000}
        };



        //data for vector norm.
        // a size 3 list of arguments for the test routine.
        private static readonly List<object> vecnormList = new List<object>();

        // random dimensions n = 11

        private static readonly double[] Temp079 = {-7.300000, 2.800000, -5.630000, -6.610000, -5.020000, 1.150000, 9.960000, -4.520000, -7.710000, 3.900000, 1.290000};
        private static readonly double Temp080 = 18.947087;

        // random dimensions n = 2

        private static readonly double[] Temp082 = {1.870000, -5.700000};
        private static readonly double Temp083 = 5.998908;

        // random dimensions n = 15

        private static readonly double[] Temp085 = {8.020000, 5.540000, 9.440000, -9.150000, 9.420000, -6.230000, 1.730000, 4.320000, 3.710000, 3.130000, 2.540000, 9.110000, 2.810000, -1.740000, 6.240000};
        private static readonly double Temp086 = 24.081501;



        private static void PopulateAugList()
        {
            var Temp000 = new List<object>();
            Temp000.Add(new Matrix(Temp001));
            Temp000.Add(new Vector(Temp002));
            Temp000.Add(new Matrix(Temp003));
            augList.Add(Temp000);
            var Temp004 = new List<object>();
            Temp004.Add(new Matrix(Temp005));
            Temp004.Add(new Vector(Temp006));
            Temp004.Add(new Matrix(Temp007));
            augList.Add(Temp004);
            var Temp008 = new List<object>();
            Temp008.Add(new Matrix(Temp009));
            Temp008.Add(new Vector(Temp010));
            Temp008.Add(new Matrix(Temp011));
            augList.Add(Temp008);
        }

        private static void PopulateNsmatvecList()
        {
            var Temp012 = new List<object>();
            Temp012.Add(new Matrix(Temp013));
            Temp012.Add(new Vector(Temp014));
            Temp012.Add(new Vector(Temp015));
            nsmatvecList.Add(Temp012);
            var Temp016 = new List<object>();
            Temp016.Add(new Matrix(Temp017));
            Temp016.Add(new Vector(Temp018));
            Temp016.Add(new Vector(Temp019));
            nsmatvecList.Add(Temp016);
            var Temp020 = new List<object>();
            Temp020.Add(new Matrix(Temp021));
            Temp020.Add(new Vector(Temp022));
            Temp020.Add(new Vector(Temp023));
            nsmatvecList.Add(Temp020);
        }

        private static void PopulateSmatvecList()
        {
            var Temp024 = new List<object>();
            Temp024.Add(new Matrix(Temp025));
            Temp024.Add(new Vector(Temp026));
            Temp024.Add(new Vector(Temp027));
            smatvecList.Add(Temp024);
            var Temp028 = new List<object>();
            Temp028.Add(new Matrix(Temp029));
            Temp028.Add(new Vector(Temp030));
            Temp028.Add(new Vector(Temp031));
            smatvecList.Add(Temp028);
            var Temp032 = new List<object>();
            Temp032.Add(new Matrix(Temp033));
            Temp032.Add(new Vector(Temp034));
            Temp032.Add(new Vector(Temp035));
            smatvecList.Add(Temp032);
        }

        private static void PopulateNsmatmatList()
        {
            var Temp036 = new List<object>();
            Temp036.Add(new Matrix(Temp037));
            Temp036.Add(new Matrix(Temp038));
            Temp036.Add(new Matrix(Temp039));
            nsmatmatList.Add(Temp036);
            var Temp040 = new List<object>();
            Temp040.Add(new Matrix(Temp041));
            Temp040.Add(new Matrix(Temp042));
            Temp040.Add(new Matrix(Temp043));
            nsmatmatList.Add(Temp040);
            var Temp044 = new List<object>();
            Temp044.Add(new Matrix(Temp045));
            Temp044.Add(new Matrix(Temp046));
            Temp044.Add(new Matrix(Temp047));
            nsmatmatList.Add(Temp044);
        }

        private static void PopulateSmatmatList()
        {
            var Temp048 = new List<object>();
            Temp048.Add(new Matrix(Temp049));
            Temp048.Add(new Matrix(Temp050));
            Temp048.Add(new Matrix(Temp051));
            smatmatList.Add(Temp048);
            var Temp052 = new List<object>();
            Temp052.Add(new Matrix(Temp053));
            Temp052.Add(new Matrix(Temp054));
            Temp052.Add(new Matrix(Temp055));
            smatmatList.Add(Temp052);
            var Temp056 = new List<object>();
            Temp056.Add(new Matrix(Temp057));
            Temp056.Add(new Matrix(Temp058));
            Temp056.Add(new Matrix(Temp059));
            smatmatList.Add(Temp056);
        }

        private static void PopulateNstranspList()
        {
            var Temp060 = new List<object>();
            Temp060.Add(new Matrix(Temp061));
            Temp060.Add(new Matrix(Temp062));
            nstranspList.Add(Temp060);
            var Temp063 = new List<object>();
            Temp063.Add(new Matrix(Temp064));
            Temp063.Add(new Matrix(Temp065));
            nstranspList.Add(Temp063);
            var Temp066 = new List<object>();
            Temp066.Add(new Matrix(Temp067));
            Temp066.Add(new Matrix(Temp068));
            nstranspList.Add(Temp066);
        }

        private static void PopulateStranspList()
        {
            var Temp069 = new List<object>();
            Temp069.Add(new Matrix(Temp070));
            Temp069.Add(new Matrix(Temp071));
            stranspList.Add(Temp069);
            var Temp072 = new List<object>();
            Temp072.Add(new Matrix(Temp073));
            Temp072.Add(new Matrix(Temp074));
            stranspList.Add(Temp072);
            var Temp075 = new List<object>();
            Temp075.Add(new Matrix(Temp076));
            Temp075.Add(new Matrix(Temp077));
            stranspList.Add(Temp075);
        }

        private static void PopulateVecnormList()
        {
            var Temp078 = new List<object>();
            Temp078.Add(new Vector(Temp079));
            Temp078.Add(Temp080);
            vecnormList.Add(Temp078);
            var Temp081 = new List<object>();
            Temp081.Add(new Vector(Temp082));
            Temp081.Add(Temp083);
            vecnormList.Add(Temp081);
            var Temp084 = new List<object>();
            Temp084.Add(new Vector(Temp085));
            Temp084.Add(Temp086);
            vecnormList.Add(Temp084);
        }

        private static void InitAllLists()
        {
            PopulateAugList();
            PopulateNsmatvecList();
            PopulateSmatvecList();
            PopulateNsmatmatList();
            PopulateSmatmatList();
            PopulateNstranspList();
            PopulateStranspList();
            PopulateVecnormList();
        }

        // result lists for the tests
        private static readonly List<bool> res_augList = new List<bool>();
        private static readonly List<bool> res_nsmatvecList = new List<bool>();
        private static readonly List<bool> res_smatvecList = new List<bool>();
        private static readonly List<bool> res_nsmatmatList = new List<bool>();
        private static readonly List<bool> res_smatmatList = new List<bool>();
        private static readonly List<bool> res_nstranspList = new List<bool>();
        private static readonly List<bool> res_stranspList = new List<bool>();
        private static readonly List<bool> res_vecnormList = new List<bool>();

        //Routine that runs the differents tests, to be called by Main
        private static void RunTests()
        {
            foreach (List<object> item in augList)
            {
                res_augList.Add(TestMatrixAugmentation((Matrix)item[0], (Vector)item[1], (Matrix)item[2]));
            }

            foreach (List<object> item in nsmatvecList)
            {
                res_nsmatvecList.Add(TestMatrixVectorProduct("Non Square Matrix", (Matrix)item[0], (Vector)item[1], (Vector)item[2]));
            }

            foreach (List<object> item in smatvecList)
            {
                res_smatvecList.Add(TestMatrixVectorProduct("Square Matrix", (Matrix)item[0], (Vector)item[1], (Vector)item[2]));
            }

            foreach (List<object> item in nsmatmatList)
            {
                res_nsmatmatList.Add(TestMatrixMatrixProduct("Non Square Matrix", (Matrix)item[0], (Matrix)item[1], (Matrix)item[2]));
            }

            foreach (List<object> item in smatmatList)
            {
                res_smatmatList.Add(TestMatrixMatrixProduct("Square Matrix", (Matrix)item[0], (Matrix)item[1], (Matrix)item[2]));
            }

            foreach (List<object> item in nstranspList)
            {
                res_nstranspList.Add(TestTranspose("Square Matrix", (Matrix)item[0], (Matrix)item[1]));
            }

            foreach (List<object> item in stranspList)
            {
                res_stranspList.Add(TestTranspose("Non Square Matrix", (Matrix)item[0], (Matrix)item[1]));
            }

            foreach (List<object> item in vecnormList)
            {
                res_vecnormList.Add(TestVectorNorm((Vector)item[0], (double)item[1]));
            }

        }

        // call the reporting routine for each case tested
        private static void PrintReport()
        {
            var Temp087 = PrintSummary(res_augList, "Matrix.AugmentRight(Vector)");
            Console.WriteLine("".PadRight(Temp087, '='));

            Console.WriteLine("\n");
            List<bool> Temp088 = res_nsmatvecList.Concat(res_smatvecList).ToList();
            var Temp089 = PrintSummary(Temp088, "Matrix.Product(Vector)");
            PrintSummary(res_nsmatvecList, "(Non Square Matrix) Matrix.Product(Vector)", prefix : "", padd : 55);
            PrintSummary(res_smatvecList, "(Square Matrix) Matrix.Product(Vector)", prefix : "", padd : 55);
            Console.WriteLine("".PadRight(Temp089, '='));

            Console.WriteLine("\n");
            List<bool> Temp090 = res_nsmatmatList.Concat(res_smatmatList).ToList();
            var Temp091 = PrintSummary(Temp090, "Matrix.Product(Matrix)");
            PrintSummary(res_nsmatmatList, "(Non Square Matrix) Matrix.Product(Matrix)", prefix : "", padd : 55);
            PrintSummary(res_smatmatList, "(Square Matrix) Matrix.Product(Matrix)", prefix : "", padd : 55);
            Console.WriteLine("".PadRight(Temp091, '='));

            Console.WriteLine("\n");
            List<bool> Temp092 = res_nstranspList.Concat(res_stranspList).ToList();
            var Temp093 = PrintSummary(Temp092, "Matrix.Transpose()");
            PrintSummary(res_nstranspList, "(Square Matrix) Matrix.Transpose()", prefix : "", padd : 55);
            PrintSummary(res_stranspList, "(Non Square Matrix) Matrix.Transpose()", prefix : "", padd : 55);
            Console.WriteLine("".PadRight(Temp093, '='));

            Console.WriteLine("\n");
            var Temp094 = PrintSummary(res_vecnormList, "Vector.VectorNorm()");
            Console.WriteLine("".PadRight(Temp094, '='));

            Console.WriteLine("\n");
        }

    }
}
